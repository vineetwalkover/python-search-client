# coding: utf-8

"""
    universal search engine

    universal search engine api  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from universal_search_engine.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_index(self, name, type, api_key, **kwargs):  # noqa: E501
        """Add Index By Api  # noqa: E501

        Add Index by Api, provide name and type for creating new index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_index(name, type, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name of index to be created (required)
        :param str type: type of index, should be Simple_Search or Ecommerce (required)
        :param str api_key: API_KEY for authentication (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_index_with_http_info(name, type, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_index_with_http_info(name, type, api_key, **kwargs)  # noqa: E501
            return data

    def add_index_with_http_info(self, name, type, api_key, **kwargs):  # noqa: E501
        """Add Index By Api  # noqa: E501

        Add Index by Api, provide name and type for creating new index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_index_with_http_info(name, type, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name of index to be created (required)
        :param str type: type of index, should be Simple_Search or Ecommerce (required)
        :param str api_key: API_KEY for authentication (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `add_index`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `add_index`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `add_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/addIndexByApi', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_object(self, index_name, api_key, object, **kwargs):  # noqa: E501
        """This will add an object to the given index.  # noqa: E501

        It rquire a json object which we want to add.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_object(index_name, api_key, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str api_key: API_KEY for authentication (required)
        :param object object: This is the single object to be add in index. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_object_with_http_info(index_name, api_key, object, **kwargs)  # noqa: E501
        else:
            (data) = self.add_object_with_http_info(index_name, api_key, object, **kwargs)  # noqa: E501
            return data

    def add_object_with_http_info(self, index_name, api_key, object, **kwargs):  # noqa: E501
        """This will add an object to the given index.  # noqa: E501

        It rquire a json object which we want to add.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_object_with_http_info(index_name, api_key, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str api_key: API_KEY for authentication (required)
        :param object object: This is the single object to be add in index. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'api_key', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `add_object`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `add_object`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `add_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object' in params:
            body_params = params['object']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/add/{index_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_objects(self, index_name, api_key, objects_list, **kwargs):  # noqa: E501
        """This will add an array of objects to the given index.  # noqa: E501

        It rquire a json array of objects which we want to add.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_objects(index_name, api_key, objects_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str api_key: API_KEY for authentication (required)
        :param list[object] objects_list: This is the single object to be add in index. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_objects_with_http_info(index_name, api_key, objects_list, **kwargs)  # noqa: E501
        else:
            (data) = self.add_objects_with_http_info(index_name, api_key, objects_list, **kwargs)  # noqa: E501
            return data

    def add_objects_with_http_info(self, index_name, api_key, objects_list, **kwargs):  # noqa: E501
        """This will add an array of objects to the given index.  # noqa: E501

        It rquire a json array of objects which we want to add.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_objects_with_http_info(index_name, api_key, objects_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str api_key: API_KEY for authentication (required)
        :param list[object] objects_list: This is the single object to be add in index. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'api_key', 'objects_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `add_objects`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `add_objects`")  # noqa: E501
        # verify the required parameter 'objects_list' is set
        if ('objects_list' not in params or
                params['objects_list'] is None):
            raise ValueError("Missing the required parameter `objects_list` when calling `add_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'objects_list' in params:
            body_params = params['objects_list']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulkadd/{index_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_index_config(self, api_key, src, dest, **kwargs):  # noqa: E501
        """Copy Index configuration from one index to another  # noqa: E501

        Copy Index Configuration, provide src and dest for copying index configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_index_config(api_key, src, dest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: API_KEY for authentication (required)
        :param str src: Source Index (required)
        :param str dest: Target Index (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_index_config_with_http_info(api_key, src, dest, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_index_config_with_http_info(api_key, src, dest, **kwargs)  # noqa: E501
            return data

    def copy_index_config_with_http_info(self, api_key, src, dest, **kwargs):  # noqa: E501
        """Copy Index configuration from one index to another  # noqa: E501

        Copy Index Configuration, provide src and dest for copying index configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_index_config_with_http_info(api_key, src, dest, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: API_KEY for authentication (required)
        :param str src: Source Index (required)
        :param str dest: Target Index (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'src', 'dest']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_index_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `copy_index_config`")  # noqa: E501
        # verify the required parameter 'src' is set
        if ('src' not in params or
                params['src'] is None):
            raise ValueError("Missing the required parameter `src` when calling `copy_index_config`")  # noqa: E501
        # verify the required parameter 'dest' is set
        if ('dest' not in params or
                params['dest'] is None):
            raise ValueError("Missing the required parameter `dest` when calling `copy_index_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501
        if 'src' in params:
            query_params.append(('src', params['src']))  # noqa: E501
        if 'dest' in params:
            query_params.append(('dest', params['dest']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/copyIndexConfig', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_index(self, index, api_key, **kwargs):  # noqa: E501
        """Delete Index  # noqa: E501

        Delete Index, provide name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_index(index, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: name of index to be deleted (required)
        :param str api_key: API_KEY for authentication (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_index_with_http_info(index, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_index_with_http_info(index, api_key, **kwargs)  # noqa: E501
            return data

    def delete_index_with_http_info(self, index, api_key, **kwargs):  # noqa: E501
        """Delete Index  # noqa: E501

        Delete Index, provide name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_index_with_http_info(index, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: name of index to be deleted (required)
        :param str api_key: API_KEY for authentication (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `delete_index`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `delete_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'index' in params:
            query_params.append(('index', params['index']))  # noqa: E501
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/deleteIndexByApi', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_object(self, index_name, api_key, object_id, **kwargs):  # noqa: E501
        """This will delete the object with given object id  # noqa: E501

        this require an objectID of object to be deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object(index_name, api_key, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str api_key: API_KEY for authentication (required)
        :param str object_id: objectId of the object to be deleted (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_object_with_http_info(index_name, api_key, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_object_with_http_info(index_name, api_key, object_id, **kwargs)  # noqa: E501
            return data

    def delete_object_with_http_info(self, index_name, api_key, object_id, **kwargs):  # noqa: E501
        """This will delete the object with given object id  # noqa: E501

        this require an objectID of object to be deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_with_http_info(index_name, api_key, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str api_key: API_KEY for authentication (required)
        :param str object_id: objectId of the object to be deleted (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'api_key', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `delete_object`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `delete_object`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params or
                params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `delete_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501
        if 'object_id' in params:
            query_params.append(('objectID', params['object_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/delete/{index_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_event(self, index_name, api_key, type, object, **kwargs):  # noqa: E501
        """This will generate an event.  # noqa: E501

        event type should be provided and it shoulb be click.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_event(index_name, api_key, type, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str api_key: API_KEY for authentication (required)
        :param str type: type of the event (required)
        :param Object1 object: This is the single object to be add in index. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_event_with_http_info(index_name, api_key, type, object, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_event_with_http_info(index_name, api_key, type, object, **kwargs)  # noqa: E501
            return data

    def generate_event_with_http_info(self, index_name, api_key, type, object, **kwargs):  # noqa: E501
        """This will generate an event.  # noqa: E501

        event type should be provided and it shoulb be click.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_event_with_http_info(index_name, api_key, type, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str api_key: API_KEY for authentication (required)
        :param str type: type of the event (required)
        :param Object1 object: This is the single object to be add in index. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'api_key', 'type', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `generate_event`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `generate_event`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `generate_event`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `generate_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'object' in params:
            body_params = params['object']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/{index_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_objects(self, index, api_key, **kwargs):  # noqa: E501
        """Get All objects stored in index  # noqa: E501

        Get All objects stored in index, limit is 1000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_objects(index, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: (required)
        :param str api_key: API_KEY for authentication (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_objects_with_http_info(index, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_objects_with_http_info(index, api_key, **kwargs)  # noqa: E501
            return data

    def get_all_objects_with_http_info(self, index, api_key, **kwargs):  # noqa: E501
        """Get All objects stored in index  # noqa: E501

        Get All objects stored in index, limit is 1000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_objects_with_http_info(index, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index: (required)
        :param str api_key: API_KEY for authentication (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_all_objects`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `get_all_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'index' in params:
            query_params.append(('index', params['index']))  # noqa: E501
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getAllObjects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_query(self, index_name, query, api_key, **kwargs):  # noqa: E501
        """search_query  # noqa: E501

        Returns a list of stuff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_query(index_name, query, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str query: Query to be searched (required)
        :param str api_key: API KEY for authentication (required)
        :param int size: maximum number of results to be returned
        :param str user_token: userToken for personalization
        :param SearchParameters search_parameters: The user to create.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_query_with_http_info(index_name, query, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.search_query_with_http_info(index_name, query, api_key, **kwargs)  # noqa: E501
            return data

    def search_query_with_http_info(self, index_name, query, api_key, **kwargs):  # noqa: E501
        """search_query  # noqa: E501

        Returns a list of stuff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_query_with_http_info(index_name, query, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str index_name: name of index (required)
        :param str query: Query to be searched (required)
        :param str api_key: API KEY for authentication (required)
        :param int size: maximum number of results to be returned
        :param str user_token: userToken for personalization
        :param SearchParameters search_parameters: The user to create.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_name', 'query', 'api_key', 'size', 'user_token', 'search_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_name' is set
        if ('index_name' not in params or
                params['index_name'] is None):
            raise ValueError("Missing the required parameter `index_name` when calling `search_query`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `search_query`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `search_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index_name' in params:
            path_params['index_name'] = params['index_name']  # noqa: E501

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'api_key' in params:
            query_params.append(('API_KEY', params['api_key']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'user_token' in params:
            query_params.append(('userToken', params['user_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search_parameters' in params:
            body_params = params['search_parameters']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/{index_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
