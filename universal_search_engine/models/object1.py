# coding: utf-8

"""
    universal search engine

    universal search engine api  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Object1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_clicked_on': 'str',
        'clicked_by_user': 'str'
    }

    attribute_map = {
        'object_clicked_on': 'objectClickedOn',
        'clicked_by_user': 'clickedByUser'
    }

    def __init__(self, object_clicked_on=None, clicked_by_user=None):  # noqa: E501
        """Object1 - a model defined in Swagger"""  # noqa: E501

        self._object_clicked_on = None
        self._clicked_by_user = None
        self.discriminator = None

        if object_clicked_on is not None:
            self.object_clicked_on = object_clicked_on
        if clicked_by_user is not None:
            self.clicked_by_user = clicked_by_user

    @property
    def object_clicked_on(self):
        """Gets the object_clicked_on of this Object1.  # noqa: E501

        This will be the object id of the clicked object  # noqa: E501

        :return: The object_clicked_on of this Object1.  # noqa: E501
        :rtype: str
        """
        return self._object_clicked_on

    @object_clicked_on.setter
    def object_clicked_on(self, object_clicked_on):
        """Sets the object_clicked_on of this Object1.

        This will be the object id of the clicked object  # noqa: E501

        :param object_clicked_on: The object_clicked_on of this Object1.  # noqa: E501
        :type: str
        """

        self._object_clicked_on = object_clicked_on

    @property
    def clicked_by_user(self):
        """Gets the clicked_by_user of this Object1.  # noqa: E501

        This will be id of the user who clicked the object  # noqa: E501

        :return: The clicked_by_user of this Object1.  # noqa: E501
        :rtype: str
        """
        return self._clicked_by_user

    @clicked_by_user.setter
    def clicked_by_user(self, clicked_by_user):
        """Sets the clicked_by_user of this Object1.

        This will be id of the user who clicked the object  # noqa: E501

        :param clicked_by_user: The clicked_by_user of this Object1.  # noqa: E501
        :type: str
        """

        self._clicked_by_user = clicked_by_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Object1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Object1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
